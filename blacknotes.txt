plan
    + add koin
    add viewModel
        add some kind of list adapter
    inject viewModel into mainFragment
    add idatabase
    create fakedatabase class
        load = generates new
        save = does nothing
    inject idatabase into viewmodel

    implement room thing
        dao classes, at least two of them
        some test requests?
    
    create empty database when there's no headers
        insert then
        
    todo
        check protobuf loading extra field (forward compatibility)
        make custom serialization

data model
    1. Storage

        all absolute offsets are Long, 8 bytes when fixed
        all magic are Long 8 bytes
        salt is also 8 byte

        // file structure:
        // chunk chunk chunk where each is:
        // d -> data...
        // h -> SDataBase
        // FixedHeader
        //      h : offset 8b
        //      d : offset 8b
        //      fileFormatMagic: 8b

        // Enum constants
        // StorageMagic
        // * StorageMagicCurrentlyWriting
        // * ShreddedMagic

        SKey
            passSalt: Long?
            passIters: Long?
            passHash: Long?
            bytes: ByteArray?

        SDatabase
            keys: ArrayList<SKey>
            root: SRef
            * timestamps: STimeStamps
        
        SRef
            offset: Long
            salt: Long <fixed>
            keyId: Long?

        // SEncryptedChunkHeader
        //    size: Long 8 bytes
        //    crc32: Int
        // not really a structure, 12 bytes read from decrypted 1st block

        // encrypted chunk is read via
        SVariantNode
            uuid: ByteArray -- each item has uuid
            folder: SFolder?
            note: SNote?

        SFolder
            name: String
            items: ArrayList<SRef>

        SNote
            title: String

    2. Model / memory

        MKey
            secretKey: Skey

        MNode is either:
            MNodeFolder
            MNodeNote
            MNodeFile

        MNodeLoading
            ref: Ref
            
        MNodeLocked
            ref: Ref
            keyId: id

        MNodeFailed
            ref: Ref
            error: String

        MNodeFolder

        MNodeNote

        MDatabase
            sdatabase: SDatabase?
            activeKeys: Map<KeyId, SecretKey>
            root: MNode
            * timestamps: MTimestamps
            * settings: MSettings

        NodeId
            offset: Long

        NBase is either
 
globals:

    все типы данных содержатся в таблице
    singleton, created compile time
        * check on app start (check compile time)
    HashMap<uuid, DataType>
        DataType
            uuid
            load(uuid, LoadingContext)
                LoadingContext
                    can read primitives maybe

    loadQueue: sorted list of items
        on state update: mark dirty, upon load next reorder
        ability to remove item

    ObjectId = UUID
    KeyId = Int // key hash or something

    NodeHolder
        objectId: ObjectId
        data: NBase 
        keyId: KeyId
        - loading via weak ref -

    NStub ->
        error: String?
        startTime: TimeStamp?
        
        isSleeping()
        isLoading()
        isError()

    NFolder
        name: String
        items: List<NodeHolder>

    NNote
        style: String
        title: String 
        comment: String 

    NFile
        style: String
        name: String
        blob: DBlob
            
misc
    autochange folder icon to list of notes
    notes filter
    tag filter
    enumerate inner classes, run test for each of them
        - use swith sealed class to test each subclass is present
    enumerate enum members to check they don't collide
    x read packed element from byte array not protobuf full class
    todo: 

    what is protobuf strategy
    uuid stuff
        UUID uuid = UUID.randomUUID();
        byte[] uuidBytes = new byte[16];
        ByteBuffer.wrap(uuidBytes)
        .order(ByteOrder.BIG_ENDIAN)
        .putLong(uuid.getMostSignificantBits())
        .putLong(uuid.getLeastSignificantBits());
        
    protobuf contextual serialization for uuids
        https://stackoverflow.com/questions/59929313/how-to-serialize-a-library-class-to-protobuf-with-kotlinx-serialization

Иерархические заметки с мастер паролями.

Суть: заметки, которые легко упорядочить, разделить на делянки под разными паролями и синхронизировать на гугл драйв.

Фичи:
- Иерархия, как папки в файловой системе, не теги, как сейчас везде делают
- Тип текст: просто короткий текст
- Тип аттач: прикреплённый бинарный файл, картинка, pdf и т.п.
- Каждую "папку" можно зашифровать
- Пароли не отдельные на каждую заметку, а набор мастер паролей, допустим один пароль для работы, один для дома

Зачем:
- замена быстрих заметок, но иерархическая (удобнее тегов имхо, хотя теги тоже можно добавить)
- замена парольницы. Для тех у кого 300 разных паролей пинов и т.п.

navigation component   
   // navigation component
    def nav_version = "2.5.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    in fragmentcontainerview
        app:defaultNavHost="true"
        app:navGraph="@navigation/nav_graph"

    // Feature module Support
    // implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    // Jetpack Compose Integration
    // implementation "androidx.navigation:navigation-compose:$nav_version"

    //    @Test
    //    fun testEnumSealed() {
    //        val sub = SealedBase::class.sealedSubclasses
    //        for (s in sub) {
    //            println("subclass: $s")
    //        }
    //    }
    //
    // works after adding to gradle:
    //  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"        


project structure, where to put viewmodel
database observer weak ref

room
    class SqliteChunkStorage(context: Context) {
        private val db = Room.databaseBuilder(context, AppDatabase::class.java, "main.db").build()